//Fibonaccimal Base 
//用費氏數列表示十進位數，因為表示方式有很多，所以規定任兩個被選中的項次不能在費氏數列中相鄰。
//sol
//初始化費氏數列：
//fib[0] = 1，fib[1] = 2，然後從 i = 2 開始，依次計算 fib[i] = fib[i-1] + fib[i-2]，即每項等於前兩項之和。
//費氏數列產生的是 {1, 2, 3, 5, 8, 13, ...}。
//處理測試用例：
//讀取測試數量 n，對每個測試用例讀取一個整數 in1。
//每計算 Fibonaccimal Base 表示：
//從最大的費氏數開始，逐項判斷是否可以用該費氏數來表示 in1 的一部分：
//從 fib[38] 到 fib[0] 逐一檢查：
//如果 in1 - fib[i] >= 0，說明可以選用 fib[i] 來表示數字的一部分。輸出 1 並減去 fib[i] 的值（即 in1 = in1 - fib[i]）。
//如果 in1 已經使用過至少一個費氏數（即 flag == 1），而當前的 fib[i] 不符合條件，則輸出 0。
//這樣的結果是將輸入的數字用不相鄰的費氏數列項之和來唯一表示。次輸出時，首先打印 in1 的值以及等號，格式為 in1 = 。

#include <iostream>
using namespace std;

int main()
{
    int fib[39], i, n, in1;

    // 初始化費氏數列的前 39 項
    fib[0] = 1;
    fib[1] = 2;
    for (i = 2; i < 39; i++) // 產生費氏數列
    {
        fib[i] = fib[i - 1] + fib[i - 2];
    }

    cin >> n; // 輸入測試數量
    while (n--)
    {
        cin >> in1; // 讀取要轉換的數字
        cout << in1 << " = "; // 格式化輸出

        int flag = 0;

        // 從最大的費氏數開始，嘗試用費氏數列表示數字
        for (i = 38; i >= 0; i--) // 遍歷費氏數列的每一項
        {
            // 如果當前數字減去費氏數列的某項結果非負，說明這項可以被選中
            if (in1 - fib[i] >= 0)
            {
                cout << "1"; // 表示這個費氏數列項被選中
                in1 = in1 - fib[i]; // 更新數字，減去選中的費氏數列項
                flag = 1; // 設置標記，表示已經找到至少一個「1」
            }
            else if (flag == 1)
            {
                // 如果在找到第一個「1」後，後續的費氏數項不能被選中，則輸出「0」
                cout << "0";
            }
        }
        cout << " (fib)" << endl; // 輸出結尾格式
    }
    return 0;
}

